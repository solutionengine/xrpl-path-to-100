/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BookOffer } from "./BookOffer";
import { BookOfferCountArgs } from "./BookOfferCountArgs";
import { BookOfferFindManyArgs } from "./BookOfferFindManyArgs";
import { BookOfferFindUniqueArgs } from "./BookOfferFindUniqueArgs";
import { CreateBookOfferArgs } from "./CreateBookOfferArgs";
import { UpdateBookOfferArgs } from "./UpdateBookOfferArgs";
import { DeleteBookOfferArgs } from "./DeleteBookOfferArgs";
import { BookOfferDto } from "../BookOfferDto";
import { BookOfferService } from "../bookOffer.service";
@graphql.Resolver(() => BookOffer)
export class BookOfferResolverBase {
  constructor(protected readonly service: BookOfferService) {}

  async _bookOffersMeta(
    @graphql.Args() args: BookOfferCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BookOffer])
  async bookOffers(
    @graphql.Args() args: BookOfferFindManyArgs
  ): Promise<BookOffer[]> {
    return this.service.bookOffers(args);
  }

  @graphql.Query(() => BookOffer, { nullable: true })
  async bookOffer(
    @graphql.Args() args: BookOfferFindUniqueArgs
  ): Promise<BookOffer | null> {
    const result = await this.service.bookOffer(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BookOffer)
  async createBookOffer(
    @graphql.Args() args: CreateBookOfferArgs
  ): Promise<BookOffer> {
    return await this.service.createBookOffer({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BookOffer)
  async updateBookOffer(
    @graphql.Args() args: UpdateBookOfferArgs
  ): Promise<BookOffer | null> {
    try {
      return await this.service.updateBookOffer({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BookOffer)
  async deleteBookOffer(
    @graphql.Args() args: DeleteBookOfferArgs
  ): Promise<BookOffer | null> {
    try {
      return await this.service.deleteBookOffer(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Query(() => [BookOfferDto])
  async FetchBookOffers(
    @graphql.Args()
    args: string
  ): Promise<BookOfferDto[]> {
    return this.service.FetchBookOffers(args);
  }

  @graphql.Query(() => String)
  async GetBookOffers(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.GetBookOffers(args);
  }
}
