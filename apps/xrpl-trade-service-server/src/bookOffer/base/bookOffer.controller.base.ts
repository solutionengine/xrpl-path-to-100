/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BookOfferService } from "../bookOffer.service";
import { BookOfferCreateInput } from "./BookOfferCreateInput";
import { BookOffer } from "./BookOffer";
import { BookOfferFindManyArgs } from "./BookOfferFindManyArgs";
import { BookOfferWhereUniqueInput } from "./BookOfferWhereUniqueInput";
import { BookOfferUpdateInput } from "./BookOfferUpdateInput";
import { BookOfferDto } from "../BookOfferDto";

export class BookOfferControllerBase {
  constructor(protected readonly service: BookOfferService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BookOffer })
  async createBookOffer(
    @common.Body() data: BookOfferCreateInput
  ): Promise<BookOffer> {
    return await this.service.createBookOffer({
      data: data,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        offerId: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BookOffer] })
  @ApiNestedQuery(BookOfferFindManyArgs)
  async bookOffers(@common.Req() request: Request): Promise<BookOffer[]> {
    const args = plainToClass(BookOfferFindManyArgs, request.query);
    return this.service.bookOffers({
      ...args,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        offerId: true,
        price: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BookOffer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async bookOffer(
    @common.Param() params: BookOfferWhereUniqueInput
  ): Promise<BookOffer | null> {
    const result = await this.service.bookOffer({
      where: params,
      select: {
        amount: true,
        createdAt: true,
        id: true,
        offerId: true,
        price: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BookOffer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBookOffer(
    @common.Param() params: BookOfferWhereUniqueInput,
    @common.Body() data: BookOfferUpdateInput
  ): Promise<BookOffer | null> {
    try {
      return await this.service.updateBookOffer({
        where: params,
        data: data,
        select: {
          amount: true,
          createdAt: true,
          id: true,
          offerId: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BookOffer })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBookOffer(
    @common.Param() params: BookOfferWhereUniqueInput
  ): Promise<BookOffer | null> {
    try {
      return await this.service.deleteBookOffer({
        where: params,
        select: {
          amount: true,
          createdAt: true,
          id: true,
          offerId: true,
          price: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Get("/fetch-book-offers")
  @swagger.ApiOkResponse({
    type: BookOfferDto,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async FetchBookOffers(
    @common.Body()
    body: string
  ): Promise<BookOfferDto[]> {
    return this.service.FetchBookOffers(body);
  }

  @common.Get("/:id/get-book-offers")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async GetBookOffers(
    @common.Body()
    body: string
  ): Promise<string> {
    return this.service.GetBookOffers(body);
  }
}
