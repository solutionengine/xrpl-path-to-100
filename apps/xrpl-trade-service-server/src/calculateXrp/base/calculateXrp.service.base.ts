/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, CalculateXrp as PrismaCalculateXrp } from "@prisma/client";
import { CalculateXrpDto } from "../CalculateXrpDto";

export class CalculateXrpServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.CalculateXrpCountArgs, "select">
  ): Promise<number> {
    return this.prisma.calculateXrp.count(args);
  }

  async calculateXrps<T extends Prisma.CalculateXrpFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.CalculateXrpFindManyArgs>
  ): Promise<PrismaCalculateXrp[]> {
    return this.prisma.calculateXrp.findMany<Prisma.CalculateXrpFindManyArgs>(
      args
    );
  }
  async calculateXrp<T extends Prisma.CalculateXrpFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.CalculateXrpFindUniqueArgs>
  ): Promise<PrismaCalculateXrp | null> {
    return this.prisma.calculateXrp.findUnique(args);
  }
  async createCalculateXrp<T extends Prisma.CalculateXrpCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CalculateXrpCreateArgs>
  ): Promise<PrismaCalculateXrp> {
    return this.prisma.calculateXrp.create<T>(args);
  }
  async updateCalculateXrp<T extends Prisma.CalculateXrpUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.CalculateXrpUpdateArgs>
  ): Promise<PrismaCalculateXrp> {
    return this.prisma.calculateXrp.update<T>(args);
  }
  async deleteCalculateXrp<T extends Prisma.CalculateXrpDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.CalculateXrpDeleteArgs>
  ): Promise<PrismaCalculateXrp> {
    return this.prisma.calculateXrp.delete(args);
  }
  async CalculateXrpAmount(args: string): Promise<string> {
    throw new Error("Not implemented");
  }
  async CalculateXrpValue(args: CalculateXrpDto): Promise<CalculateXrpDto> {
    throw new Error("Not implemented");
  }
}
