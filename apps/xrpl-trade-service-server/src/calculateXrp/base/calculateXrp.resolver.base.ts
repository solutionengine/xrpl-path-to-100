/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CalculateXrp } from "./CalculateXrp";
import { CalculateXrpCountArgs } from "./CalculateXrpCountArgs";
import { CalculateXrpFindManyArgs } from "./CalculateXrpFindManyArgs";
import { CalculateXrpFindUniqueArgs } from "./CalculateXrpFindUniqueArgs";
import { CreateCalculateXrpArgs } from "./CreateCalculateXrpArgs";
import { UpdateCalculateXrpArgs } from "./UpdateCalculateXrpArgs";
import { DeleteCalculateXrpArgs } from "./DeleteCalculateXrpArgs";
import { CalculateXrpDto } from "../CalculateXrpDto";
import { CalculateXrpService } from "../calculateXrp.service";
@graphql.Resolver(() => CalculateXrp)
export class CalculateXrpResolverBase {
  constructor(protected readonly service: CalculateXrpService) {}

  async _calculateXrpsMeta(
    @graphql.Args() args: CalculateXrpCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [CalculateXrp])
  async calculateXrps(
    @graphql.Args() args: CalculateXrpFindManyArgs
  ): Promise<CalculateXrp[]> {
    return this.service.calculateXrps(args);
  }

  @graphql.Query(() => CalculateXrp, { nullable: true })
  async calculateXrp(
    @graphql.Args() args: CalculateXrpFindUniqueArgs
  ): Promise<CalculateXrp | null> {
    const result = await this.service.calculateXrp(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => CalculateXrp)
  async createCalculateXrp(
    @graphql.Args() args: CreateCalculateXrpArgs
  ): Promise<CalculateXrp> {
    return await this.service.createCalculateXrp({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => CalculateXrp)
  async updateCalculateXrp(
    @graphql.Args() args: UpdateCalculateXrpArgs
  ): Promise<CalculateXrp | null> {
    try {
      return await this.service.updateCalculateXrp({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => CalculateXrp)
  async deleteCalculateXrp(
    @graphql.Args() args: DeleteCalculateXrpArgs
  ): Promise<CalculateXrp | null> {
    try {
      return await this.service.deleteCalculateXrp(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Query(() => String)
  async CalculateXrpAmount(
    @graphql.Args()
    args: string
  ): Promise<string> {
    return this.service.CalculateXrpAmount(args);
  }

  @graphql.Mutation(() => CalculateXrpDto)
  async CalculateXrpValue(
    @graphql.Args()
    args: CalculateXrpDto
  ): Promise<CalculateXrpDto> {
    return this.service.CalculateXrpValue(args);
  }
}
